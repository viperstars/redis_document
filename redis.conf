# Redis configuration file example

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#（通常redis会使用最后的选项生效，如果你希望include的文件中的选项生效，那么就把include的配置放在配置文件的末尾）
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.（默认不会运行为后台服务）
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.（如果以后台服务运行，那么会产生pid文件）
daemonize no

# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.（pid文件的位置，可以自定义）
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379.（监听端口）
# If port 0 is specified Redis will not listen on a TCP socket.
port 6379

# TCP listen() backlog.
#
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.（tcp的backlog队列大小）
tcp-backlog 511

# By default Redis listens for connections from all the network interfaces
# available on the server. It is possible to listen to just one or multiple
# interfaces using the "bind" configuration directive, followed by one or
# more IP addresses.（监听地址，redis默认监听所有网卡上的所有ip地址）
#
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.（unix的sock文件以及权限）
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive.
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
#（如果设置为非零值，那么会在和客户端无信息的时候发送ack消息来检测客户端以及网络的可达性）
# 1) Detect dead peers.
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
#（此值即决定多久发送一次ack消息，两倍的此值为超时时间）
# A reasonable value for this option is 60 seconds.
tcp-keepalive 0

# Specify the server verbosity level.
# This can be one of:（日志级别，决定是否记录或者输出更多的信息）
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel notice

# Specify the log file name. Also the empty string can be used to force（日志文件，redis默认输出在标准输出）
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile ""

# To enable logging to the system logger, just set 'syslog-enabled' to yes,（是否使用syslog）
# and optionally update the other syslog parameters to suit your needs.
# syslog-enabled no

# Specify the syslog identity.（syslog级别）
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.（指定syslog的facility）
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select（设置默认的数据库的数量）
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
databases 16

################################ SNAPSHOTTING  ################################
#
# Save the DB on disk:（rdb持久化的选项，即在多长时间内有多少key被修改便使用rdb持久化保存数据一次）
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#
#   save ""

save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled（如果rdb持久化进程在后台写入rdb文件出错之后，主服务器是否在恢复正常之前可写）
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?（是否在rdb持久化存储时使用LZF算法压缩string对象，如果设置为yes，会增加cpu的使用率，如果为no，则会增大rdb文件的大小）
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.（在rdb文件尾部会存放第五版本的CRC64的校验码以保证文件的正确性，但是会有接近10%的性能消耗）
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum yes

# The filename where to dump the DB（rdb文件的文件名）
dbfilename dump.rdb

# The working directory.（指定工作目录）
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
dir ./

################################# REPLICATION #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of（主从复制）
# another Redis server. A few things to understand ASAP about Redis replication.
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of slaves.
# 2) Redis slaves are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition slaves automatically try to reconnect to masters
#    and resynchronize with them.
#（从服务器指定master的配置）
# slaveof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration（如果主服务器配置了requirepass选项，那么从服务器需要配置同样的密码以保证同步）
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
#
# masterauth <master-password>

# When a slave loses its connection with the master, or when the replication
# is still in progress, the slave can act in two different ways:（在和主服务器断开连接之后或者是正在复制进行中，从服务器时候使用以前的数据来提供服务）
#
# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
#
# 2) if slave-serve-stale-data is set to 'no' the slave will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO and SLAVEOF.
#
slave-serve-stale-data yes

# You can configure a slave instance to accept writes or not. Writing against（可以配置从服务器是否可写）
# a slave instance may be useful to store some ephemeral data (because data
# written on a slave will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
#
# Since Redis 2.6 by default slaves are read-only.（2.6版本以后默认只读不可写）
#
# Note: read only slaves are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only slave exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only slaves using 'rename-command' to shadow all the
# administrative / dangerous commands.
slave-read-only yes

# Replication SYNC strategy: disk or socket.
#
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
#
# New slaves and reconnecting slaves that are not able to continue the replication（复制的SYNC策略，使用或不使用硬盘）
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the slaves.
# The transmission can happen in two different ways:
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB（主服务器产生子进程写入硬盘上的rdb文件，rdb文件被传输到从服务器）
#                 file on disk. Later the file is transferred by the parent
#                 process to the slaves incrementally.
# 2) Diskless: The Redis master creates a new process that directly writes the（主服务器产生子进程，并写入从服务器的sock文件，不使用硬盘）
#              RDB file to slave sockets, without touching the disk at all.
#
# With disk-backed replication, while the RDB file is generated, more slaves（如果在复制过程中使用硬盘，当rdb文件产生后，在子进程完成写入之后从服务器会排队使用rdb文件）
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once（如果在复制过程中不使用硬盘，当rdb文件传输开始之后，如果有新的从服务器需要同步，则会被加入队列等待此次传输完成）
# the transfer starts, new slaves arriving will be queued and a new transfer
# will start when the current one terminates.
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple slaves
# will arrive and the transfer can be parallelized.（如果在复制过程中不使用硬盘，那么主服务器会等待一个配置了的时间段，以保证所有的从服务器都到达，这样可以更好的并行的复制）
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that trnasfers the RDB via socket
# to the slaves.（使用无硬盘主从同步时，主服务器需要等待的时间）
#
# This is important since once the transfer starts, it is not possible to serve
# new slaves arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more slaves arrive.
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
repl-diskless-sync-delay 5

# Slaves send PINGs to server in a predefined interval. It's possible to change（从服务器默认ping主服务器的时间间隔）
# this interval with the repl_ping_slave_period option. The default value is 10
# seconds.
#
# repl-ping-slave-period 10

# The following option sets the replication timeout for:（配置复制超时时间）
#
# 1) Bulk transfer I/O during SYNC, from the point of view of slave.（在SYNC期间批量回复的超时时间，以从服务器的角度）
# 2) Master timeout from the point of view of slaves (data, pings).（数据和ping的超时，以主服务器的角度）
# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).（主服务器的超时时间，以从服务器的角度）
#
# It is important to make sure that this value is greater than the value（此值应该大于repl-ping-slave-period的值，否则在低流量的网络中总是会检测到超时）
# specified for repl-ping-slave-period otherwise a timeout will be detected
# every time there is low traffic between the master and the slave.
#
# repl-timeout 60

# Disable TCP_NODELAY on the slave socket after SYNC?（是否在从服务器SYNC之后关闭TCP_NODELAY）
#
# If you select "yes" Redis will use a smaller number of TCP packets and（如果开启了此选项，那么redis更少数的tcp报文从而使用较少的带宽，即将很多小的tcp报文组装成更大的报文一起发送）
# less bandwidth to send data to slaves. But this can add a delay for
# the data to appear on the slave side, up to 40 milliseconds with
# Linux kernels using a default configuration.
#
# If you select "no" the delay for data to appear on the slave side will（如果关闭此选项，那么会从服务器的延迟会降低，但是会使用更多的带宽，即使用更多的小的tcp报文）
# be reduced but more bandwidth will be used for replication.
#
# By default we optimize for low latency, but in very high traffic conditions（默认情况下，会关闭此选项以保证低延迟，但是在高流量的网络中应该打开此选项以节省带宽）
# or when the master and slaves are many hops away, turning this to "yes" may
# be a good idea.
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates（复制backlog的大小）
# slave data when slaves are disconnected for some time, so that when a slave（当从服务器断开连接之后，主服务器会缓存此时接受的操作，那么当从服务器重新脸上主服务器之后便可以继续同步，而不需要进行完全同步）
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the slave missed while
# disconnected.
#
# The bigger the replication backlog, the longer the time the slave can be（此大小配置的越大，就越能保存在断开连接之后在主服务器上的操作，也能接受更长时间的断连）
# disconnected and later be able to perform a partial resynchronization.
#
# The backlog is only allocated once there is at least a slave connected.
#
# repl-backlog-size 1mb

# After a master has no longer connected slaves for some time, the backlog（在从服务器最后一次断连之后，主服务器需要保存backlog的时间）
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last slave disconnected, for
# the backlog buffer to be freed.
#
# A value of 0 means to never release the backlog.（为0表示不释放backlog的空间）
#
# repl-backlog-ttl 3600

# The slave priority is an integer number published by Redis in the INFO output.（从服务器的优先级，是用在哨兵模式，当主服务器不可用时用于在从服务器中选举出一个作为主服务器使用）
# It is used by Redis Sentinel in order to select a slave to promote into a
# master if the master is no longer working correctly.
#
# A slave with a low priority number is considered better for promotion, so（此值越低优先级越高）
# for instance if there are three slaves with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
#
# However a special priority of 0 marks the slave as not able to perform the（为0表示不能被选举为主服务器）
# role of master, so a slave with priority of 0 will never be selected by
# Redis Sentinel for promotion.
#
# By default the priority is 100.（默认值为100）
slave-priority 100

# It is possible for a master to stop accepting writes if there are less than（当主服务器在少于N个从服务器连接以及在M秒落后时，会不允许写入）
# N slaves connected, having a lag less or equal than M seconds.
#
# The N slaves need to be in "online" state.
#
# The lag in seconds, that must be <= the specified value, is calculated from（落后时间是指从最后一次收到从服务器ping开始计算）
# the last ping received from the slave, that is usually sent every second.
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough slaves
# are available, to the specified number of seconds.
#
# For example to require at least 3 slaves with a lag <= 10 seconds use:
#
# min-slaves-to-write 3
# min-slaves-max-lag 10
#
# Setting one or the other to 0 disables the feature.
#
# By default min-slaves-to-write is set to 0 (feature disabled) and（默认情况下此特性关闭）
# min-slaves-max-lag is set to 10.

################################## SECURITY ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other（要求在处理客户端的请求之前需要进行验证）
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
#
# Warning: since Redis is pretty fast an outside user can try up to（由于redis的高性能，所以需要尽可能的设置复杂密码以防密码爆破攻击）
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
#
# requirepass foobared

# Command renaming.（命令重命名）
#
# It is possible to change the name of dangerous commands in a shared（可以将一些比较危险的命令进行重命名，重命名后对于内部工具不适用）
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into（可以将命令重命名为空，这样命令会失效）
# an empty string:
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the（如果对命令进行了重命名，那么此操作也会记录至aof文件以及传递至从服务器）
# AOF file or transmitted to slaves may cause problems.

################################### LIMITS ####################################

# Set the max number of connected clients at the same time. By default（控制同时连接的客户端的数量，默认10000，如果有ulimt的限制，那么此值为ulimit的值减去32）
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
#
# Once the limit is reached Redis will close all the new connections sending（在同时连接的用户数到达此值时，新连接的用户会收到一个max number of clients reached的错误信息）
# an error 'max number of clients reached'.
#
# maxclients 10000

# Don't use more memory than the specified amount of bytes.（不要使用超过此配置大小的内存，当接近此值时，redis根据移除策略移除一些key）
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can't remove keys according to the policy, or if the policy is（如果基于移除策略为不移除，那么redis会对SET，LPUSH等写操作返回内存不足的错误，只能响应GET这样的读操作）
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU cache, or to set（这个选项一般在将redis做为一个LRU缓存来使用，或者是设置一个实例内存使用的硬上线）
# a hard memory limit for an instance (using the 'noeviction' policy).
#
# WARNING: If you have slaves attached to an instance with maxmemory on,（如果某个实例的从服务器配置了最大内存，那么需要从使用的内存中申请一块作为输出缓存）
# the size of the output buffers needed to feed the slaves are subtracted（所以网络问题或者重新同步会在有key被删除时导致一个操作环路，在检测到需要删除key的时候将删除key的操作）
# from the used memory count, so that network problems / resyncs will（写入缓存中，缓存越满就要删除越多的key，直到所有的key都被删除）
# not trigger a loop where keys are evicted, and in turn the output
# buffer of slaves is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have slaves attached it is suggested that you set a lower（所以在有从服务器时，需要设置一个小的值，以保证有空间来作为输出缓存，如果删除key的策略是不删除就不用这样擦做）
# limit for maxmemory so that there is some free RAM on the system for slave
# output buffers (but this is not needed if the policy is 'noeviction').
#
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory（到达最大内存后的删除策略）
# is reached. You can select among five behaviors:
#（LRU：最近最少使用）
# volatile-lru -> remove the key with an expire set using an LRU algorithm（使用LRU算法来删除设置了超时的key）
# allkeys-lru -> remove any key according to the LRU algorithm（根据LRU算法删除任意key）
# volatile-random -> remove a random key with an expire set（随机删除设置了超时的key）
# allkeys-random -> remove a random key, any key（随机删除任意key）
# volatile-ttl -> remove the key with the nearest expire time (minor TTL)（删除距离超时时间最近的key）
# noeviction -> don't expire at all, just return an error on write operations（不删除，在有写入操作是返回错误）
#
# Note: with any of the above policies, Redis will return an error on write（在使用以上任何策略后，没有key可以删除时，redis会在写操作时返回一个错误，）
#       operations, when there are no suitable keys for eviction.
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy volatile-lru

# LRU and minimal TTL algorithms are not precise algorithms but approximated（根据LRU或者TTL来删除key都不是完全准确但是近似的做法，所以可以设置选择范围）
# algorithms (in order to save memory), so you can select as well the sample（redis根据此值选择key并根据LRU或者TTL来删除key）
# size to check. For instance for default Redis will check three keys and
# pick the one that was used less recently, you can change the sample size
# using the following configuration directive.
#
# maxmemory-samples 3

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is（默认redis会异步的将数据保存在硬盘上，这个模式可以应对很多应用，但是在某些情况下会有数据的丢失）
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides（aof是另一个可选的持久化策略，aof的数据持久性更好，例如默认的每秒同步一次，在断电的情况下也仅仅会丢失一秒的数据）
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is（或者是在redis进程本身出问题的时，后台aof写入依旧正常）
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.（aof和rdb可以同时开启，如果在启动时开启了aof，那么会在启动时加载aof文件，以保证更好地持久性）
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: "appendonly.aof")（aof的文件名）

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk（fsync()系统调用会告诉操作系统写入硬盘文件）
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
#
# Redis supports three different modes:（redis支持一下三种fsync方式）
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.（从不fsync()，依赖操作系统何时fsync()）
# always: fsync after every write to the append only log. Slow, Safest.（在每个写操作之后fsync()，速度慢，最安全）
# everysec: fsync only one time every second. Compromise.（每秒fsync()，折中方案）
#
# The default is "everysec", as that's usually the right compromise between（默认情况下为每秒fysnc()，在安全性和速度之间进行了折中）
# speed and data safety. It's up to you to understand if you can relax this to（从不fsync()是指依赖操作系统何时fsync()，为了更好的性能表现可以使用此策略）
# "no" that will let the operating system flush the output buffer when（每个写操作之后fsync()，最慢，但是比每秒fsync()更安全）
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background（当aof的fsync策略配置为每秒或者每次写操作的时候，保存进程会有很多的I/O操作）
# saving process (a background save or AOF log background rewriting) is（这样某些linux配置会阻塞fsync()很长时间）
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for（目前没有修复这个问题的办法，即使在另外一个进程进行fsync时也会阻塞同步的写操作）
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
#
# In order to mitigate this problem it's possible to use the following option（为了避免以上问题，可以使用以下来防止主进程使用BGSAVE和BGREWRITEAOF时调用fsync()）
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
#
# This means that while another child is saving, the durability of Redis is（这意味着当一个子进程在保存时，redis的持久性和appendfsync none一致，即有操作系统来负责fsync()）
# the same as "appendfsync none". In practical terms, this means that it is（在默认的Linux配置下，可能会导致最长30s的数据丢失）
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
#
# If you have latency problems turn this to "yes". Otherwise leave it as（如果因为延迟问题可以设置为yes，其他情况下就设置为no，这是最能够保证持久性的办法了）
# "no" that is the safest pick from the point of view of durability.

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.（aof的自动重构）
# Redis is able to automatically rewrite the log file implicitly calling（redis可以在aof文件增加到指定的百分比时，自动对aof文件进行重构）
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the（redis会记住最近一次重构后aof文件的大小，）
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is（会用现在的大小去对比之前的大小，如果百分比大于设置的值，那么就会启动重构）
# bigger than the specified percentage, the rewrite is triggered. Also（你也需要一个一个最小的需要重构的大小，这是用来避免在百分比增大，但是始终小于配置的百分比的情况）
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF（设置百分比为0用来禁用aof自动重构）
# rewrite feature.

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis（aof文件可能会在redis启动的时候被载入进内存时被清空，这样的情况会发生在redis崩溃）
# startup process, when the AOF data gets loaded back into memory.（尤其是在ext4文件系统在挂载时没有设置data=ordered选项时）
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
#
# Redis can either exit with an error when this happens, or load as much（如果在发现aof最终被清空，默认情况下redis要么报错要么是载入尽可能多的数据并启动）
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and（如果此选项设置为yes，那么会载入清空的aof文件并启动，然后将将事件记录至日志）
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error（如果此选项设置为no，那么redis会报错并拒绝启动）
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart（设置为no时，需要用户手动利用redis-check-aof来修复aof文件并启动redis）
# the server.
#
# Note that if the AOF file will be found to be corrupted in the middle（如果在aof发现问题，那么redis也会退出并返回错误）
# the server will still exit with an error. This option only applies when（此情况会发生在redis需要充aof中读取更多数据但是没有数据找到时发生）
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.（lua脚本可以执行的最长时间）
#
# If the maximum execution time is reached Redis will log that a script is（如果脚本执行的时间超过此值，那么会记录日志此脚本继续执行的情况）
# still in execution after the maximum allowed time and will start to（但是redis会开始在响应客户端请求时返回一个错误）
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the（在脚本执行时间超时后，只有SCRIPT KILL和SHUTDOWN NOSAVE可用）
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be（前者用来中断还未执行写操作的脚本的执行）
# used to stop a script that did not yet called write commands. The second（后者用来在脚本已经执行写操作但是不想等待脚本自己结束时，关闭服务器）
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.（设置为0表示无超时时间，也不会产生警告）
lua-time-limit 5000

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified（慢查询日志用来记录请求执行的时长）
# execution time. The execution time does not include the I/O operations（执行时间不包括I/O操作，类似与客户端传输，发送响应等等）
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only（仅仅是执行命令的时长，是线程阻塞并且不能响应其他请求的阶段）
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
#
# You can configure the slow log with two parameters: one tells Redis（可以配置慢查询日志的两个参数）
# what is the execution time, in microseconds, to exceed in order for the（一个可以控制redis记录命令执行的时长）
# command to get logged, and the other parameter is the length of the（当一个命令的执行时长超过此前的记录，那么较短的那个会被替换）
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.

# The following time is expressed in microseconds, so 1000000 is equivalent（此配置单位为毫秒，为负值时为关闭此选项，为0时为记录所有命令的时长）
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.（慢查询日志的最大长度，此值没有限制，但是要注意此记录会消耗内存）
# You can reclaim memory used by the slow log with SLOWLOG RESET.（可以SLOWLOG RESET来慢查询日志使用的内存空间）
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations（延迟监控用来监控不同的操作以收集关联的可能造成redis进程延迟的因素）
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can（通过LATENCY命令可以打印出图表并获得报告）
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or（系统紧紧会记录时间等于或大于配置中指定latency-monitor-threshold的值的操作，为0表示关闭延迟监控）
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed（默认情况下，延迟监控是关闭的）
# if you don't have latency issues, and collecting data has a performance（如果没有延迟，收集信息对于性能是有影响的，有可能是很大的负载）
# impact, that while very small, can be measured under big load. Latency（如果需要时可以通过CONFIG SET latency-monitor-threshold <milliseconds>打开）
# monitoring can easily be enalbed at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
latency-monitor-threshold 0

############################# Event notification ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.（redis可以通过pub/sub来实现事件通知）
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client（例如在事件空间通知开启时，如果删除了在数据库0中的key，那么pub/sub中会有两条信息发布）
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set（可以选择一些需要通知的类型）
# of classes. Every class is identified by a single character:
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.（键空间事件）
#  E     Keyevent events, published with __keyevent@<db>__ prefix.（键事件）
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...（通用命令）
#  $     String commands（字符串命令）
#  l     List commands（列表命令）
#  s     Set commands（集合命令）
#  h     Hash commands（hash命令）
#  z     Sorted set commands（有序集合命令）
#  x     Expired events (events generated every time a key expires)（超时事件）
#  e     Evicted events (events generated when a key is evicted for maxmemory)（清除事件）
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.（所有事件）
#
#  The "notify-keyspace-events" takes as argument a string that is composed（notify-keyspace-events后面可以跟以上字符做参数）
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need（默认情况下事件通知未开启，因为大多数用户不需要此特定，并且此特性会有一些经常性开销）
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.（如果你不至少指定K或者E，那么不会有任何事件通知）
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
#（hash类型的数据结构在编码上可以使用ziplist和hashtable，ziplist的特点就是文件存储（以及内存存储）所需的空间较小，在内容较小时，性能和hashtable几乎一样。因此redis对hash类型默认采取ziplist。如果hash中条目的条目个数或者value长度达到阀值，将会被重构为hashtable）
hash-max-ziplist-entries 512
hash-max-ziplist-value 64


# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
#（对于list类型，将会采取ziplist，linkedlist两种编码类型，如果list中条目的条目个数或者value长度达到阀值，将会被重构为linkedlist）
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
#（intset中允许保存的最大条目个数，如果达到阀值，intset将会被重构为hashtable）
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in（有序集合会被一种特殊的方式编码来节省内存空间，仅当集合的长度和元素满足以下限制）
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
#（zset为有序集合，有2中编码类型：ziplist，skiplist。因为"排序"将会消耗额外的性能，当zset中数据较多时,将会被重构为skiplist）
zset-max-ziplist-entries 128
zset-max-ziplist-value 64


# HyperLogLog sparse representation bytes limit. The limit includes the（hyperloglog的稀疏模式表示是有大小限制的，大小包括一个16字节的头部）
# 16 bytes header. When an HyperLogLog using the sparse representation crosses（如果一个hyperloglog在使用稀疏模式表示时超过了此限制，那么会转换为密集模式）
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the（大于16000的值通常是没有用的，因为使用密集模式会更有效率）
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of（建议的值为3000，如果不需要CPU的性能不成问题，那么可以调整为10000）
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in（动态的重新hash会每100毫秒消耗1毫秒来完成对redis的hash表进行重新hash）
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to（默认是每秒10次重新hash）
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure: （如果不确定，那么关闭此选项，如果有延迟问题并且对于你的环境来说在响应每个请求都有2毫秒的延迟并不是一件好事）
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but（如果没有过多的要求，可以开启此选项以保证在有空闲内存时可以尽可能快的使用）
# want to free memory asap when possible.
#（是否开启顶层数据结构的rehash功能，如果内存允许，请开启，rehash能够很大程度上提高K/V存取的效率）
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients（输出缓冲大小可以用来强制断开因为某些原因从服务器读取速度不够快的客户端）
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:（此值可以分别设置在三种不同的客户端）
#
# normal -> normal clients including MONITOR clients（一般客户端，包括监控的客户端）
# slave  -> slave clients（从服务器）
# pubsub -> clients subscribed to at least one pubsub channel or pattern（pub/sub，订阅了至少一个pub或者模式的客户端）
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if（当到达了硬上限时，客户端会立刻被断开，而到达了软上线，客户端还是保持连接指定的时长）
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data（默认情况下，所有的一般客户端都不会有任何限制）
# without asking (in a push way), but just after a request, so only（所以只有在异步的客户端，即推送的情况下，才会有请求的数据快过能够读取的速度）
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and slave clients, since（默认对于slave和pub/sub客户端会有限制，由于这两种客户端是异步的方式）
# subscribers and slaves receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like（redis会调用内部函数来完成很多后台工作，例如关闭超时客户端的连接，删除从未请求的超时的key等等）
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for（并不是所有的后台任务都在同一个频率下进行，但是redis会根据此值来作为依据）
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when（默认情况下此值设置为10，在redis空闲的状态下会消耗更多的CPU）
# Redis is idle, but at the same time will make Redis more responsive when（但是在很多key超时，以即很多超时情况需要处理的情况下，redis的响应更迅速更准确）
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not（此值的范围是1到500，但是高于100的值并不是一个好主意，大多数用户会在10和100之间调整此值）
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# When a child rewrites the AOF file, if the following option is enabled（当子进程对aof文件进行重构时，如果此选项开启，那么在每产生32MB数据时会fysnc()一次）
# the file will be fsync-ed every 32 MB of data generated. This is useful（这样更有利于将数据增量的写入硬盘，避免延迟过大）
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes
